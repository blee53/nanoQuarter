/** Written by Bryan Lee
*   Senior design project for MicroSemi
*   10/23/16
**/

module integration1( input reg [31:0] exInst,
			input reg      Mmuxout,	regWrite,
					   PCNI,
			output wire 	     PC,	jmp,
				            bne,        memRead,
				       memWrite,        valid,
		     output reg [15:0] reg1data,	reg2data,
		      output reg [2:0] ALU_func,
			 output reg [1:0] shamt,
			   output reg [6:0] iVal);
//prefetch module
reg [15:0] upperHalf; 				upperHalf = exInst[31:16];
reg [15:0] lowerHalf;				lowerHalf = exInst[15:0];		
reg [15:0] inst;				
reg wp_;

//pc and pc_mux module
reg [31:0] PC_mux_out;
reg [31:0] PC_out;
reg stall_flg;


//stage1 module
reg [4:0] stall_boffset_in;			s_boffset_in = inst[7:3];
reg [7:0] j_target;				j_target = inst[10:3];
reg [5:0] memaddr_in;				memaddr_in = inst[10:5];

//main control module
reg [1:0] inst_opcode;				inst_opcode = inst[15:14];
reg [2:0]inst_funct;				inst_funct = inst[2:0];  //main control input function
reg jmp_flg, brnch_flg, nop_flg, 
	  memRd_flg, memWrt_flg;

//stall module
reg [2:0] rs1;					rs1 = inst[13:11];
reg [2:0] rs2;					rs2 = inst[10:8];
reg [2:0] rd;					rd = inst[7:5];

//ALUcontrol
reg [1:0] shamt;
reg jr;
reg [2:0] alu_funct; // alucontrol output function


PrefetchBuffer PrefetchBuffer(	.clk(clk),			.rst(rst),
				.wp_(wp_),			.inst1(lowerHalf),
			    	.inst2(upperHalf),     		.inst(inst));

PCMUX PCMUX(			.PC_in(PC_out), 		.PC_NI(PC_NI), 
				.stall_flg(stall_flg), 		.PC_out(PC_mux_out));

PC PC(				.clk(clk),			.rst(rst),
				.new_PC(PC_mux_out),		.PC_out(PC_out));


MainControl MainControl(	.stall_flg(stall_flg),		.opcode(inst_opcode),
				.funct(inst_funct),		.jmp_flg(jmp_flg),
				.brnch_flg(brnch_flg),		.nop_flg(nop_flg),
				.memRd_flg(memRd_flg),		.memWrt_flg(memWrt_flg));

StallUnit StallUnit(		.clk(clk),			.rst(rst),
				.opcode(inst_opcode),		.rs1(rs1),
				.rs2(rs2),			.rd(rd),
				.pc_old(PC_out),		.pc_new(PC_out),
				.stall_flg(stall_flg));

ALUControl ALUControl(		.inst(inst),			.func(alu_funct),
				.shamt(shamt),			.jr(jr));

Stage1 Stage1(			.clk(clk),			.rst(rst),
				.jtarget_in(j_target),		.memaddr_in(memaddr_in),
				.boffset_in(s_boffset_in),	.funct_in(inst_funct),
				.ALUfunct_in(alu_funct),	.jr_in(jump_flg),
				.PC_in(PC_out)			.reg1data_in(reg1data),
				.reg2data_in(reg2data),		.reg1data_out(reg1data_out),
				.reg2data_out(reg2data_out),	.jtarget_out(jtarget_out),
				.memaddr_out(memaddr_out),	.boffset_out(boffset_out),
				.funct_out(funct_out),		.ALUfunct_out(ALUfunct_out),
				.jr_out(jr_out),		.PC_out(PC_out));
endmodule
